// Icaro for upgrade, updates in code. based on tfs 1.4 
// Special Credits: Pota, Ruby
// Copyright 2023 The Forgotten Server Authors. All rights reserved.
// Use of this source code is governed by the GPL-2.0 License that can be found in the LICENSE file.

#ifndef FS_ENUMS_H_003445999FEE4A67BCECBE918B0124CE
#define FS_ENUMS_H_003445999FEE4A67BCECBE918B0124CE

enum RuleViolationType_t : uint8_t {
	REPORT_TYPE_NAME = 0,
	REPORT_TYPE_STATEMENT = 1,
	REPORT_TYPE_BOT = 2
};

enum RuleViolationReasons_t : uint8_t {
	REPORT_REASON_NAMEINAPPROPRIATE = 0,
	REPORT_REASON_NAMEPOORFORMATTED = 1,
	REPORT_REASON_NAMEADVERTISING = 2,
	REPORT_REASON_NAMEUNFITTING = 3,
	REPORT_REASON_NAMERULEVIOLATION = 4,
	REPORT_REASON_INSULTINGSTATEMENT = 5,
	REPORT_REASON_SPAMMING = 6,
	REPORT_REASON_ADVERTISINGSTATEMENT = 7,
	REPORT_REASON_UNFITTINGSTATEMENT = 8,
	REPORT_REASON_LANGUAGESTATEMENT = 9,
	REPORT_REASON_DISCLOSURE = 10,
	REPORT_REASON_RULEVIOLATION = 11,
	REPORT_REASON_STATEMENT_BUGABUSE = 12,
	REPORT_REASON_UNOFFICIALSOFTWARE = 13,
	REPORT_REASON_PRETENDING = 14,
	REPORT_REASON_HARASSINGOWNERS = 15,
	REPORT_REASON_FALSEINFO = 16,
	REPORT_REASON_ACCOUNTSHARING = 17,
	REPORT_REASON_STEALINGDATA = 18,
	REPORT_REASON_SERVICEATTACKING = 19,
	REPORT_REASON_SERVICEAGREEMENT = 20
};

enum BugReportType_t : uint8_t {
	BUG_CATEGORY_MAP = 0,
	BUG_CATEGORY_TYPO = 1,
	BUG_CATEGORY_TECHNICAL = 2,
	BUG_CATEGORY_OTHER = 3
};

enum ThreadState {
	THREAD_STATE_RUNNING,
	THREAD_STATE_CLOSING,
	THREAD_STATE_TERMINATED,
};

static std::map<uint16_t, int> mapHeldAttack = {
    {27, 8},  // 1
    {28, 12}, // 2
    {29, 16}, // 3
    {30, 20}, // 4
    {31, 24}, // 5
    {32, 28},  // 6
    {33, 32},  // 7
    {34, 36},  // 8
    {35, 40},  // 9 
//////////////////////
    {36, 45},  // 10
    {37, 50},  // 11
    {38, 76},  // 12
    {39, 60}   // 13
};

static std::map<uint16_t, int> mapHeldPoison = {
    {160, 90},  // 1
    {161, 125}, // 2
    {162, 160}, // 3
    {163, 195}, // 4
    {164, 230}, // 5
    {165, 265},  // 6
    {166, 300},  // 7
    {167, 325},  // 8
    {168, 350},  // 9 
    {169, 375},  // 10
    {170, 400},  // 11
    {171, 450},  // 12
    {172, 500}   // 13
};

static std::map<uint16_t, int> mapHeldHellfire = {
    {134, 90},  // 1
    {135, 125}, // 2
    {136, 160}, // 3
    {137, 195}, // 4
    {138, 230}, // 5
    {139, 265},  // 6
    {140, 300},  // 7
    {141, 325},  // 8
    {142, 350},  // 9 
    {143, 375},  // 10
    {144, 400},  // 11
    {145, 450},  // 12
    {146, 500}   // 13
};

enum itemAttrTypes : uint64_t {
    ITEM_ATTRIBUTE_NONE,

    ITEM_ATTRIBUTE_ACTIONID = 1ULL << 0,
    ITEM_ATTRIBUTE_UNIQUEID = 1ULL << 1,
    ITEM_ATTRIBUTE_DESCRIPTION = 1ULL << 2,
    ITEM_ATTRIBUTE_TEXT = 1ULL << 3,
    ITEM_ATTRIBUTE_DATE = 1ULL << 4,
    ITEM_ATTRIBUTE_WRITER = 1ULL << 5,
    ITEM_ATTRIBUTE_NAME = 1ULL << 6,
    ITEM_ATTRIBUTE_ARTICLE = 1ULL << 7,
    ITEM_ATTRIBUTE_PLURALNAME = 1ULL << 8,
    ITEM_ATTRIBUTE_WEIGHT = 1ULL << 9,
    ITEM_ATTRIBUTE_ATTACK = 1ULL << 10,
    ITEM_ATTRIBUTE_DEFENSE = 1ULL << 11,
    ITEM_ATTRIBUTE_EXTRADEFENSE = 1ULL << 12,
    ITEM_ATTRIBUTE_ARMOR = 1ULL << 13,
    ITEM_ATTRIBUTE_HITCHANCE = 1ULL << 14,
    ITEM_ATTRIBUTE_SHOOTRANGE = 1ULL << 15,
    ITEM_ATTRIBUTE_OWNER = 1ULL << 16,
    ITEM_ATTRIBUTE_DURATION = 1ULL << 17,
    ITEM_ATTRIBUTE_DECAYSTATE = 1ULL << 18,
    ITEM_ATTRIBUTE_CORPSEOWNER = 1ULL << 19,
    ITEM_ATTRIBUTE_CHARGES = 1ULL << 20,
    ITEM_ATTRIBUTE_FLUIDTYPE = 1ULL << 21,
    ITEM_ATTRIBUTE_DOORID = 1ULL << 22,
    ITEM_ATTRIBUTE_SPECIAL = 1ULL << 23,
    ITEM_ATTRIBUTE_BLINK = 1ULL << 24,
    ITEM_ATTRIBUTE_POKEMONHOLDER = 1ULL << 25,
    ITEM_ATTRIBUTE_POKEMONHOLDERINFO = 1ULL << 26,
    ITEM_ATTRIBUTE_POKEMONHOLDERCREATUREID = 1ULL << 27,
    ITEM_ATTRIBUTE_UNIQUE_ITEM = 1ULL << 28,
    ITEM_ATTRIBUTE_AUTOOPEN = 1ULL << 29,
    ITEM_ATTRIBUTE_HELDX = 1ULL << 30,
    ITEM_ATTRIBUTE_HELDY = 1ULL << 31,
    ITEM_ATTRIBUTE_HELDU = 1ULL << 32,
	ITEM_ATTRIBUTE_CUSTOM = 1ULL << 33,
	ITEM_ATTRIBUTE_DECAYTO = 1ULL << 34,
	ITEM_ATTRIBUTE_WRAPID = 1ULL << 35
};


enum VipStatus_t : uint8_t {
	VIPSTATUS_OFFLINE = 0,
	VIPSTATUS_ONLINE = 1,
	VIPSTATUS_PENDING = 2
};

enum ChannelEvent_t : uint8_t {
	CHANNELEVENT_JOIN = 0,
	CHANNELEVENT_LEAVE = 1,
	CHANNELEVENT_INVITE = 2,
	CHANNELEVENT_EXCLUDE = 3,
};

enum CreatureType_t : uint8_t {
	CREATURETYPE_PLAYER = 0,
	CREATURETYPE_MONSTER = 1,
	CREATURETYPE_NPC = 2,
	CREATURETYPE_SUMMON_OWN = 3,
	CREATURETYPE_SUMMON_OTHERS = 4,
};

enum OperatingSystem_t : uint8_t {
	CLIENTOS_NONE = 0,

	CLIENTOS_LINUX = 1,
	CLIENTOS_WINDOWS = 2,
	CLIENTOS_FLASH = 3,

	CLIENTOS_OTCLIENT_LINUX = 10,
	CLIENTOS_OTCLIENT_WINDOWS = 11,
	CLIENTOS_OTCLIENT_MAC = 12,

	// by default OTCv8 uses CLIENTOS_WINDOWS for backward compatibility
	// for correct value enable g_game.enableFeature(GameExtendedOpcode)
	// in modules/game_features/features.lua
	CLIENTOS_OTCLIENTV8_LINUX = 20,
	CLIENTOS_OTCLIENTV8_WINDOWS = 21,
	CLIENTOS_OTCLIENTV8_MAC = 22,
	CLIENTOS_OTCLIENTV8_ANDROID = 23,
	CLIENTOS_OTCLIENTV8_IOS = 24,
	CLIENTOS_OTCLIENTV8_WEB = 25
};

enum SpellType_t : uint8_t
{
	SPELL_UNDEFINED = 0,
	SPELL_INSTANT = 1,
	SPELL_RUNE = 2,
};

enum SpellGroup_t : uint8_t {
	SPELLGROUP_NONE = 0,
	SPELLGROUP_ATTACK = 1,
	SPELLGROUP_HEALING = 2,
	SPELLGROUP_SUPPORT = 3,
	SPELLGROUP_SPECIAL = 4,
};

enum AccountType_t : uint8_t {
	ACCOUNT_TYPE_NORMAL = 1,
	ACCOUNT_TYPE_HELP = 2,
	ACCOUNT_TYPE_TUTOR = 3,
	ACCOUNT_TYPE_GAMEMASTER = 4,
	ACCOUNT_TYPE_COMMUNITYMANAGER = 5,
	ACCOUNT_TYPE_GOD = 6
};

enum RaceType_t : uint8_t {
	RACE_NONE,
	RACE_VENOM,
	RACE_FIRE,
	RACE_ENERGY,
	RACE_GRASS,
	RACE_NORMAL,
	RACE_WATER,
	RACE_FLYING,
	RACE_POISON,
	RACE_ELECTRIC,
	RACE_GROUND,
	RACE_PSYCHIC,
	RACE_ROCK,
	RACE_ICE,
	RACE_BUG,
	RACE_DRAGON,
	RACE_GHOST,
	RACE_DARK,
	RACE_STEEL,
	RACE_FAIRY,
	RACE_FIGHTING,
};

struct Effectiveness {
    std::vector<RaceType_t> noEffect;
    std::vector<RaceType_t> ineffective;
    std::vector<RaceType_t> effective;
};

static std::unordered_map<RaceType_t, Effectiveness> CONST_EFFECTIVENESS = {
    {RACE_NORMAL, {{RACE_GHOST}, {RACE_ROCK, RACE_STEEL}, {}}},
    {RACE_FIRE, {{}, {RACE_FIRE, RACE_WATER, RACE_ROCK, RACE_DRAGON}, {RACE_GRASS, RACE_ICE, RACE_BUG, RACE_STEEL}}},
    {RACE_WATER, {{}, {RACE_WATER, RACE_GRASS, RACE_DRAGON}, {RACE_FIRE, RACE_GROUND, RACE_ROCK}}},
    {RACE_ELECTRIC, {{RACE_GROUND}, {RACE_ELECTRIC, RACE_GRASS, RACE_DRAGON}, {RACE_WATER, RACE_FLYING}}},
    {RACE_GRASS, {{}, {RACE_FIRE, RACE_GRASS, RACE_POISON, RACE_FLYING, RACE_BUG, RACE_DRAGON, RACE_STEEL}, {RACE_WATER, RACE_GROUND, RACE_ROCK}}},
    {RACE_ICE, {{}, {RACE_FIRE, RACE_WATER, RACE_ICE, RACE_STEEL}, {RACE_GRASS, RACE_GROUND, RACE_FLYING, RACE_DRAGON}}},
    {RACE_FIGHTING, {{RACE_GHOST}, {RACE_POISON, RACE_FLYING, RACE_PSYCHIC, RACE_BUG, RACE_FAIRY}, {RACE_NORMAL, RACE_ICE, RACE_ROCK, RACE_DARK, RACE_STEEL}}},
    {RACE_POISON, {{RACE_STEEL}, {RACE_POISON, RACE_GROUND, RACE_ROCK, RACE_GHOST}, {RACE_GRASS, RACE_FAIRY}}},
    {RACE_GROUND, {{RACE_FLYING}, {RACE_GRASS, RACE_BUG}, {RACE_FIRE, RACE_ELECTRIC, RACE_POISON, RACE_ROCK, RACE_STEEL}}},
    {RACE_FLYING, {{}, {RACE_ELECTRIC, RACE_ROCK, RACE_STEEL}, {RACE_GRASS, RACE_FIGHTING, RACE_BUG}}},
    {RACE_PSYCHIC, {{RACE_DARK}, {RACE_PSYCHIC, RACE_STEEL}, {RACE_FIGHTING, RACE_POISON}}},
    {RACE_BUG, {{}, {RACE_FIRE, RACE_FIGHTING, RACE_POISON, RACE_FLYING, RACE_GHOST, RACE_STEEL, RACE_FAIRY}, {RACE_GRASS, RACE_PSYCHIC, RACE_DARK}}},
    {RACE_ROCK, {{}, {RACE_FIGHTING, RACE_GROUND, RACE_STEEL}, {RACE_FIRE, RACE_ICE, RACE_FLYING, RACE_BUG}}},
    {RACE_GHOST, {{RACE_NORMAL}, {RACE_DARK}, {RACE_PSYCHIC, RACE_GHOST}}},
    {RACE_DRAGON, {{RACE_FAIRY}, {RACE_STEEL}, {RACE_DRAGON}}},
    {RACE_DARK, {{}, {RACE_FIGHTING, RACE_DARK, RACE_FAIRY}, {RACE_PSYCHIC, RACE_GHOST}}},
    {RACE_STEEL, {{}, {RACE_FIRE, RACE_WATER, RACE_ELECTRIC, RACE_STEEL}, {RACE_ICE, RACE_ROCK, RACE_FAIRY}}},
    {RACE_FAIRY, {{}, {RACE_FIRE, RACE_POISON, RACE_STEEL}, {RACE_FIGHTING, RACE_DRAGON, RACE_DARK}}}
};


enum MonstersEvent_t : uint8_t {
	MONSTERS_EVENT_NONE = 0,
	MONSTERS_EVENT_THINK = 1,
	MONSTERS_EVENT_APPEAR = 2,
	MONSTERS_EVENT_DISAPPEAR = 3,
	MONSTERS_EVENT_MOVE = 4,
	MONSTERS_EVENT_SAY = 5,
};

enum CombatType_t : uint32_t {
	COMBAT_NONE = 0,

	COMBAT_PHYSICALDAMAGE = 1 << 0,
	COMBAT_ENERGYDAMAGE = 1 << 1,
	COMBAT_EARTHDAMAGE = 1 << 2,
	COMBAT_FIREDAMAGE = 1 << 3,
	COMBAT_UNDEFINEDDAMAGE = 1 << 4,
	COMBAT_LIFEDRAIN = 1 << 5,
	COMBAT_MANADRAIN = 1 << 6,
	COMBAT_HEALING = 1 << 7,
	COMBAT_DROWNDAMAGE = 1 << 8,
	COMBAT_ICEDAMAGE = 1 << 9,
	COMBAT_HOLYDAMAGE = 1 << 10,
	COMBAT_DEATHDAMAGE = 1 << 11,
	COMBAT_PSYCHICDAMAGE = 1 << 12,
	COMBAT_GRASSDAMAGE = 1 << 13,
	COMBAT_NORMALDAMAGE = 1 << 14,
	COMBAT_WATERDAMAGE = 1 << 15,
	COMBAT_FLYINGDAMAGE = 1 << 16,
	COMBAT_POISONDAMAGE = 1 << 17,
	COMBAT_ELECTRICDAMAGE = 1 << 18,
	COMBAT_GROUNDDAMAGE = 1 << 19,
	COMBAT_ROCKDAMAGE = 1 << 20,
	COMBAT_BUGDAMAGE = 1 << 21,
	COMBAT_DRAGONDAMAGE = 1 << 22,
	COMBAT_GHOSTDAMAGE = 1 << 23,
	COMBAT_DARKDAMAGE = 1 << 24,
	COMBAT_STEELDAMAGE = 1 << 25,
	COMBAT_FAIRYDAMAGE = 1 << 26,
	COMBAT_FIGHTINGDAMAGE = 1 << 27,

	COMBAT_COUNT = 28
};

enum CombatParam_t {
	COMBAT_PARAM_TYPE,
	COMBAT_PARAM_EFFECT,
	COMBAT_PARAM_DISTANCEEFFECT,
	COMBAT_PARAM_BLOCKSHIELD,
	COMBAT_PARAM_BLOCKARMOR,
	COMBAT_PARAM_TARGETCASTERORTOPMOST,
	COMBAT_PARAM_CREATEITEM,
	COMBAT_PARAM_AGGRESSIVE,
	COMBAT_PARAM_DISPEL,
	COMBAT_PARAM_USECHARGES,
	COMBAT_PARAM_STRING_SPELLNAME
};

enum CallBackParam_t {
	CALLBACK_PARAM_LEVELMAGICVALUE,
	CALLBACK_PARAM_SKILLVALUE,
	CALLBACK_PARAM_TARGETTILE,
	CALLBACK_PARAM_TARGETCREATURE,
};

enum ConditionParam_t {
	CONDITION_PARAM_OWNER = 1,
	CONDITION_PARAM_TICKS = 2,
	//CONDITION_PARAM_OUTFIT = 3,
	CONDITION_PARAM_HEALTHGAIN = 4,
	CONDITION_PARAM_HEALTHTICKS = 5,
	CONDITION_PARAM_MANAGAIN = 6,
	CONDITION_PARAM_MANATICKS = 7,
	CONDITION_PARAM_DELAYED = 8,
	CONDITION_PARAM_SPEED = 9,
	CONDITION_PARAM_LIGHT_LEVEL = 10,
	CONDITION_PARAM_LIGHT_COLOR = 11,
	CONDITION_PARAM_SOULGAIN = 12,
	CONDITION_PARAM_SOULTICKS = 13,
	CONDITION_PARAM_MINVALUE = 14,
	CONDITION_PARAM_MAXVALUE = 15,
	CONDITION_PARAM_STARTVALUE = 16,
	CONDITION_PARAM_TICKINTERVAL = 17,
	CONDITION_PARAM_FORCEUPDATE = 18,
	CONDITION_PARAM_SKILL_MELEE = 19,
	CONDITION_PARAM_SKILL_FIST = 20,
	CONDITION_PARAM_SKILL_CLUB = 21,
	CONDITION_PARAM_SKILL_SWORD = 22,
	CONDITION_PARAM_SKILL_AXE = 23,
	CONDITION_PARAM_SKILL_DISTANCE = 24,
	CONDITION_PARAM_SKILL_SHIELD = 25,
	CONDITION_PARAM_SKILL_FISHING = 26,
	CONDITION_PARAM_STAT_MAXHITPOINTS = 27,
	CONDITION_PARAM_STAT_MAXMANAPOINTS = 28,
	// CONDITION_PARAM_STAT_SOULPOINTS = 29,
	CONDITION_PARAM_STAT_MAGICPOINTS = 30,
	CONDITION_PARAM_STAT_MAXHITPOINTSPERCENT = 31,
	CONDITION_PARAM_STAT_MAXMANAPOINTSPERCENT = 32,
	// CONDITION_PARAM_STAT_SOULPOINTSPERCENT = 33,
	CONDITION_PARAM_STAT_MAGICPOINTSPERCENT = 34,
	CONDITION_PARAM_PERIODICDAMAGE = 35,
	CONDITION_PARAM_SKILL_MELEEPERCENT = 36,
	CONDITION_PARAM_SKILL_FISTPERCENT = 37,
	CONDITION_PARAM_SKILL_CLUBPERCENT = 38,
	CONDITION_PARAM_SKILL_SWORDPERCENT = 39,
	CONDITION_PARAM_SKILL_AXEPERCENT = 40,
	CONDITION_PARAM_SKILL_DISTANCEPERCENT = 41,
	CONDITION_PARAM_SKILL_SHIELDPERCENT = 42,
	CONDITION_PARAM_SKILL_FISHINGPERCENT = 43,
	CONDITION_PARAM_BUFF_SPELL = 44,
	CONDITION_PARAM_SUBID = 45,
	CONDITION_PARAM_FIELD = 46,
	CONDITION_PARAM_AGGRESSIVE = 47,
	//CONDITION_PARAM_BONUS_ATTACK_POWERUP = 48,
	CONDITION_PARAM_EFFECT = 49,
	CONDITION_PARAM_EFFECT_TICKS = 50,
	//CONDITION_PARAM_BONUS_DEFENSE_POWERUP = 51,
	CONDITION_PARAM_SAVE_CONDITION = 52,
	CONDITION_PARAM_DISABLE_DEFENSE = 53,
	CONDITION_PARAM_SPECIALSKILL_CRITICALHITCHANCE = 54,
	CONDITION_PARAM_SPECIALSKILL_CRITICALHITAMOUNT = 55,
	CONDITION_PARAM_SPECIALSKILL_LIFELEECHCHANCE = 56,
	CONDITION_PARAM_SPECIALSKILL_LIFELEECHAMOUNT = 57,
	CONDITION_PARAM_SPECIALSKILL_MANALEECHCHANCE = 58,
	CONDITION_PARAM_SPECIALSKILL_MANALEECHAMOUNT = 59,
};

enum BlockType_t : uint8_t {
	BLOCK_NONE,
	BLOCK_DEFENSE,
	BLOCK_ARMOR,
	BLOCK_IMMUNITY
};

enum skills_t : uint8_t {
	SKILL_FIST = 0,
	SKILL_CLUB = 1,
	SKILL_SWORD = 2,
	SKILL_AXE = 3,
	SKILL_DISTANCE = 4,
	SKILL_SHIELD = 5,
	SKILL_FISHING = 6,

	SKILL_MAGLEVEL = 7,
	SKILL_LEVEL = 8,

	SKILL_FIRST = SKILL_FIST,
	SKILL_LAST = SKILL_FISHING
};

enum stats_t {
	STAT_MAXHITPOINTS,
	STAT_MAXMANAPOINTS,
	STAT_SOULPOINTS, // unused
	STAT_MAGICPOINTS,

	STAT_FIRST = STAT_MAXHITPOINTS,
	STAT_LAST = STAT_MAGICPOINTS
};

enum SpecialSkills_t {
	SPECIALSKILL_CRITICALHITCHANCE,
	SPECIALSKILL_CRITICALHITAMOUNT,
	SPECIALSKILL_LIFELEECHCHANCE,
	SPECIALSKILL_LIFELEECHAMOUNT,
	SPECIALSKILL_MANALEECHCHANCE,
	SPECIALSKILL_MANALEECHAMOUNT,
	SPECIALSKILL_FIRST = SPECIALSKILL_CRITICALHITCHANCE,
	SPECIALSKILL_LAST = SPECIALSKILL_MANALEECHAMOUNT
};

enum formulaType_t {
	COMBAT_FORMULA_UNDEFINED,
	COMBAT_FORMULA_LEVELMAGIC,
	COMBAT_FORMULA_SKILL,
	COMBAT_FORMULA_DAMAGE,
};

enum ConditionType_t : uint64_t {
	CONDITION_NONE,

	CONDITION_POISON = 1 << 0,
	CONDITION_FIRE = 1 << 1,
	CONDITION_ENERGY = 1 << 2,
	CONDITION_BLEEDING = 1 << 3,
	CONDITION_HASTE = 1 << 4,
	CONDITION_PARALYZE = 1 << 5,
	CONDITION_OUTFIT = 1 << 6,
	CONDITION_INVISIBLE = 1 << 7,
	CONDITION_LIGHT = 1 << 8,
	CONDITION_MANASHIELD = 1 << 9,
	CONDITION_INFIGHT = 1 << 10,
	CONDITION_DRUNK = 1 << 11,
	CONDITION_EXHAUST_WEAPON = 1 << 12, // unused
	CONDITION_REGENERATION = 1 << 13,
	CONDITION_SOUL = 1 << 14,
	CONDITION_DROWN = 1 << 15,
	CONDITION_MUTED = 1 << 16,
	CONDITION_CHANNELMUTEDTICKS = 1 << 17,
	CONDITION_YELLTICKS = 1 << 18,
	CONDITION_ATTRIBUTES = 1 << 19,
	CONDITION_FREEZING = 1 << 20,
	CONDITION_DAZZLED = 1 << 21,
	CONDITION_CURSED = 1 << 22,
	CONDITION_EXHAUST_COMBAT = 1 << 23, // unused
	CONDITION_EXHAUST_HEAL = 1 << 24, // unused
	CONDITION_PACIFIED = 1 << 25,
	CONDITION_SPELLCOOLDOWN = 1 << 26,
	CONDITION_SPELLGROUPCOOLDOWN = 1 << 27,
	CONDITION_SLEEP = 1 << 28, //pota
	CONDITION_SEED = 1 << 29, //pota
	CONDITION_MOVING = 1 << 30, //pota
	CONDITION_NOMOVE = 1ULL << 31,

	CONDITION_ATTACKBONUS = 1ULL << 32,
	CONDITION_CONFUSION = 1ULL << 33,
	CONDITION_STUN = 1ULL << 34,
	CONDITION_SILENCE = 1ULL << 35,
	CONDITION_BLIND = 1ULL << 36,
	CONDITION_DEFENSEBONUS = 1ULL << 37,
	CONDITION_FEAR = 1ULL << 38,
	CONDITION_SNARE = 1ULL << 39,
	CONDITION_RAGE = 1ULL << 40,
	CONDITION_MELEE_RAGE = 1ULL << 41,
};

enum ConditionId_t : int8_t {
	CONDITIONID_DEFAULT = -1,
	CONDITIONID_COMBAT,
	CONDITIONID_HEAD,
	CONDITIONID_NECKLACE,
	CONDITIONID_BACKPACK,
	CONDITIONID_ARMOR,
	CONDITIONID_RIGHT,
	CONDITIONID_LEFT,
	CONDITIONID_LEGS,
	CONDITIONID_FEET,
	CONDITIONID_RING,
	CONDITIONID_AMMO,
	CONDITIONID_ORDER, //pota
	CONDITIONID_INFO, //pota
};

enum PlayerSex_t : uint8_t {
	PLAYERSEX_FEMALE = 0,
	PLAYERSEX_MALE = 1,

	PLAYERSEX_LAST = PLAYERSEX_MALE
};

enum Vocation_t : uint16_t {
	VOCATION_NONE = 0
};

enum ReturnValue {
	RETURNVALUE_NOERROR,
	RETURNVALUE_NOTPOSSIBLE,
	RETURNVALUE_NOTENOUGHROOM,
	RETURNVALUE_PLAYERISPZLOCKED,
	RETURNVALUE_PLAYERISNOTINVITED,
	RETURNVALUE_CANNOTTHROW,
	RETURNVALUE_THEREISNOWAY,
	RETURNVALUE_DESTINATIONOUTOFREACH,
	RETURNVALUE_CREATUREBLOCK,
	RETURNVALUE_NOTMOVEABLE,
	RETURNVALUE_DROPTWOHANDEDITEM,
	RETURNVALUE_BOTHHANDSNEEDTOBEFREE,
	RETURNVALUE_CANONLYUSEONEWEAPON,
	RETURNVALUE_NEEDEXCHANGE,
	RETURNVALUE_CANNOTBEDRESSED,
	RETURNVALUE_PUTTHISOBJECTINYOURHAND,
	RETURNVALUE_PUTTHISOBJECTINBOTHHANDS,
	RETURNVALUE_TOOFARAWAY,
	RETURNVALUE_FIRSTGODOWNSTAIRS,
	RETURNVALUE_FIRSTGOUPSTAIRS,
	RETURNVALUE_CONTAINERNOTENOUGHROOM,
	RETURNVALUE_NOTENOUGHCAPACITY,
	RETURNVALUE_CANNOTPICKUP,
	RETURNVALUE_THISISIMPOSSIBLE,
	RETURNVALUE_DEPOTISFULL,
	RETURNVALUE_CREATUREDOESNOTEXIST,
	RETURNVALUE_CANNOTUSETHISOBJECT,
	RETURNVALUE_PLAYERWITHTHISNAMEISNOTONLINE,
	RETURNVALUE_NOTREQUIREDLEVELTOUSERUNE,
	RETURNVALUE_YOUAREALREADYTRADING,
	RETURNVALUE_THISPLAYERISALREADYTRADING,
	RETURNVALUE_YOUMAYNOTLOGOUTDURINGAFIGHT,
	RETURNVALUE_DIRECTPLAYERSHOOT,
	RETURNVALUE_NOTENOUGHLEVEL,
	RETURNVALUE_NOTENOUGHMAGICLEVEL,
	RETURNVALUE_NOTENOUGHMANA,
	RETURNVALUE_NOTENOUGHSOUL,
	RETURNVALUE_YOUAREEXHAUSTED,
	RETURNVALUE_YOUCANNOTUSEOBJECTSTHATFAST,
	RETURNVALUE_PLAYERISNOTREACHABLE,
	RETURNVALUE_CANONLYUSETHISRUNEONCREATURES,
	RETURNVALUE_ACTIONNOTPERMITTEDINPROTECTIONZONE,
	RETURNVALUE_YOUMAYNOTATTACKTHISPLAYER,
	RETURNVALUE_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE,
	RETURNVALUE_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE,
	RETURNVALUE_YOUMAYNOTATTACKTHISCREATURE,
	RETURNVALUE_YOUCANONLYUSEITONCREATURES,
	RETURNVALUE_CREATUREISNOTREACHABLE,
	RETURNVALUE_TURNSECUREMODETOATTACKUNMARKEDPLAYERS,
	RETURNVALUE_YOUNEEDPREMIUMACCOUNT,
	RETURNVALUE_YOUNEEDTOLEARNTHISSPELL,
	RETURNVALUE_YOURVOCATIONCANNOTUSETHISSPELL,
	RETURNVALUE_YOUNEEDAWEAPONTOUSETHISSPELL,
	RETURNVALUE_PLAYERISPZLOCKEDLEAVEPVPZONE,
	RETURNVALUE_PLAYERISPZLOCKEDENTERPVPZONE,
	RETURNVALUE_ACTIONNOTPERMITTEDINANOPVPZONE,
	RETURNVALUE_YOUCANNOTLOGOUTHERE,
	RETURNVALUE_YOUNEEDAMAGICITEMTOCASTSPELL,
	RETURNVALUE_CANNOTCONJUREITEMHERE,
	RETURNVALUE_YOUNEEDTOSPLITYOURSPEARS,
	RETURNVALUE_NAMEISTOOAMBIGUOUS,
	RETURNVALUE_CANONLYUSEONESHIELD,
	RETURNVALUE_NOPARTYMEMBERSINRANGE,
	RETURNVALUE_YOUARENOTTHEOWNER,
	RETURNVALUE_NOSUCHRAIDEXISTS,
	RETURNVALUE_ANOTHERRAIDISALREADYEXECUTING,
	RETURNVALUE_TRADEPLAYERFARAWAY,
	RETURNVALUE_YOUDONTOWNTHISHOUSE,
	RETURNVALUE_TRADEPLAYERALREADYOWNSAHOUSE,
	RETURNVALUE_TRADEPLAYERHIGHESTBIDDER,
	RETURNVALUE_YOUCANNOTTRADETHISHOUSE,
};

enum SpeechBubble_t
{
	SPEECHBUBBLE_NONE = 0,
	SPEECHBUBBLE_NORMAL = 1,
	SPEECHBUBBLE_TRADE = 2,
	SPEECHBUBBLE_QUEST = 3,
	SPEECHBUBBLE_QUESTTRADER = 4,
};

enum MapMark_t
{
	MAPMARK_TICK = 0,
	MAPMARK_QUESTION = 1,
	MAPMARK_EXCLAMATION = 2,
	MAPMARK_STAR = 3,
	MAPMARK_CROSS = 4,
	MAPMARK_TEMPLE = 5,
	MAPMARK_KISS = 6,
	MAPMARK_SHOVEL = 7,
	MAPMARK_SWORD = 8,
	MAPMARK_FLAG = 9,
	MAPMARK_LOCK = 10,
	MAPMARK_BAG = 11,
	MAPMARK_SKULL = 12,
	MAPMARK_DOLLAR = 13,
	MAPMARK_REDNORTH = 14,
	MAPMARK_REDSOUTH = 15,
	MAPMARK_REDEAST = 16,
	MAPMARK_REDWEST = 17,
	MAPMARK_GREENNORTH = 18,
	MAPMARK_GREENSOUTH = 19,
};

struct Outfit_t {
	uint16_t lookType = 0;
	uint16_t lookTypeEx = 0;
	uint16_t lookMount = 0;
	uint16_t lookWings = 0;
	uint16_t lookAura = 0;
	uint16_t lookShader = 0;
	uint8_t lookHead = 0;
	uint8_t lookBody = 0;
	uint8_t lookLegs = 0;
	uint8_t lookFeet = 0;
	uint8_t lookAddons = 0;
};

struct LightInfo {
	uint8_t level = 0;
	uint8_t color = 0;
	constexpr LightInfo() = default;
	constexpr LightInfo(uint8_t level, uint8_t color) : level(level), color(color) {}
};

struct ShopInfo {
	uint16_t itemId;
	int32_t subType;
	uint32_t buyPrice;
	uint32_t sellPrice;
	std::string realName;

	ShopInfo() {
		itemId = 0;
		subType = 1;
		buyPrice = 0;
		sellPrice = 0;
	}

	ShopInfo(uint16_t itemId, int32_t subType = 0, uint32_t buyPrice = 0, uint32_t sellPrice = 0, std::string realName = "")
		: itemId(itemId), subType(subType), buyPrice(buyPrice), sellPrice(sellPrice), realName(std::move(realName)) {}
};

struct ModalWindow
{
	std::list<std::pair<std::string, uint8_t>> buttons, choices;
	std::string title, message;
	uint32_t id;
	uint8_t defaultEnterButton, defaultEscapeButton;
	bool priority;

	ModalWindow(uint32_t id, std::string title, std::string message)
		: title(std::move(title)), message(std::move(message)), id(id), defaultEnterButton(0xFF), defaultEscapeButton(0xFF), priority(false) {}
};

enum CombatOrigin
{
	ORIGIN_NONE,
	ORIGIN_CONDITION,
	ORIGIN_SPELL,
	ORIGIN_MELEE,
	ORIGIN_RANGED,
	ORIGIN_RETURN,
};

struct CombatDamage
{
	struct {
		CombatType_t type;
		int64_t value;
	} primary;

	std::string spellName;
	bool critical;
	CombatOrigin origin;
	CombatDamage()
	{
		origin = ORIGIN_NONE;
		primary.type = COMBAT_NONE;
		primary.value = 0;
		critical = false;
		spellName = "";
	}
};

struct CharacterInfo {
    uint32_t vocation;
    uint32_t level;
    uint32_t looktype;
    uint32_t lookbody;
    uint32_t lookfeet;
    uint32_t lookhead;
    uint32_t looklegs;
    uint32_t lookaddons;
    std::string pokemons;
};

struct pokeballsInfo {
	uint32_t poke = 0;
	uint32_t great = 0;
	uint32_t ultra = 0;
	uint32_t saffari = 0;
	uint32_t master = 0;
	uint32_t moon = 0;
	uint32_t tinker = 0;
	uint32_t sora = 0;
	uint32_t dusk = 0;
	uint32_t yume = 0;
	uint32_t tale = 0;
	uint32_t net = 0;
	uint32_t janguru = 0;
	uint32_t magu = 0;
	uint32_t fast = 0;
	uint32_t heavy = 0;
	uint32_t premier = 0;
	uint32_t delta = 0;
	uint32_t esferadepal = 0;
	uint32_t esferamega = 0;
	uint32_t esferagiga = 0;
	uint32_t esferatera = 0;
	uint32_t esferaultra = 0;
	uint32_t esferalendaria = 0;
	uint32_t super = 0;
	uint32_t especial = 0;
	uint32_t divine = 0;
};

enum class PokeballType {
    Poke,
    Great,
    Ultra,
    Saffari,
    Master,
    Moon,
    Tinker,
    Sora,
    Dusk,
    Yume,
    Tale,
    Net,
    Janguru,
    Magu,
    Fast,
    Heavy,
    Premier,
    Delta,
    Esferadepal,
    Esferamega,
    Esferagiga,
    Esferatera,
    Esferaultra,
    Esferalendaria,
	Super,
	Especial,
	Divine,
    Unknown
};

static std::vector<uint16_t> pokeballEffects = {
    189,  190,  191,  192,  196,  24,   1535, 
	1541, 1544, 1547, 1550, 1553, 1556, 1511, 
	1562, 1556, 1568, 1572, 2346, 2366, 2369, 
	2367, 2370, 2368, 2371, 2328, 2374, 1538
};

enum TargetSearchType_t {
	TARGETSEARCH_DEFAULT,
	TARGETSEARCH_RANDOM,
	TARGETSEARCH_ATTACKRANGE,
	TARGETSEARCH_NEAREST,
};

using ShopInfoList = std::list<ShopInfo>;
using AttachedEffMap = std::map<uint16_t, uint8_t>;
using ElementalBuffMap = std::map<CombatType_t, uint16_t>;

#endif